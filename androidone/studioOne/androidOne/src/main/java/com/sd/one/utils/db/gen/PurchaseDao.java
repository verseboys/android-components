package com.sd.one.utils.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.sd.one.utils.db.entity.Purchase;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PURCHASE".
*/
public class PurchaseDao extends AbstractDao<Purchase, Long> {

    public static final String TABLENAME = "PURCHASE";

    /**
     * Properties of entity Purchase.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property PurchaseId = new Property(0, Long.class, "purchaseId", true, "_id");
        public final static Property ProductId = new Property(1, long.class, "productId", false, "PRODUCT_ID");
        public final static Property PorductName = new Property(2, String.class, "porductName", false, "PORDUCT_NAME");
        public final static Property Planflag = new Property(3, boolean.class, "planflag", false, "PLANFLAG");
        public final static Property BasePrice = new Property(4, String.class, "basePrice", false, "BASE_PRICE");
        public final static Property Price = new Property(5, String.class, "price", false, "PRICE");
        public final static Property Image = new Property(6, String.class, "image", false, "IMAGE");
        public final static Property Desc = new Property(7, String.class, "desc", false, "DESC");
        public final static Property Number = new Property(8, String.class, "number", false, "NUMBER");
        public final static Property Status = new Property(9, String.class, "status", false, "STATUS");
        public final static Property CreteTime = new Property(10, String.class, "creteTime", false, "CRETE_TIME");
    };


    public PurchaseDao(DaoConfig config) {
        super(config);
    }
    
    public PurchaseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PURCHASE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: purchaseId
                "\"PRODUCT_ID\" INTEGER NOT NULL ," + // 1: productId
                "\"PORDUCT_NAME\" TEXT," + // 2: porductName
                "\"PLANFLAG\" INTEGER NOT NULL ," + // 3: planflag
                "\"BASE_PRICE\" TEXT," + // 4: basePrice
                "\"PRICE\" TEXT," + // 5: price
                "\"IMAGE\" TEXT," + // 6: image
                "\"DESC\" TEXT," + // 7: desc
                "\"NUMBER\" TEXT," + // 8: number
                "\"STATUS\" TEXT," + // 9: status
                "\"CRETE_TIME\" TEXT);"); // 10: creteTime
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_PURCHASE_PORDUCT_NAME ON PURCHASE" +
                " (\"PORDUCT_NAME\" ASC);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_PURCHASE_PLANFLAG ON PURCHASE" +
                " (\"PLANFLAG\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PURCHASE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Purchase entity) {
        stmt.clearBindings();
 
        Long purchaseId = entity.getPurchaseId();
        if (purchaseId != null) {
            stmt.bindLong(1, purchaseId);
        }
        stmt.bindLong(2, entity.getProductId());
 
        String porductName = entity.getPorductName();
        if (porductName != null) {
            stmt.bindString(3, porductName);
        }
        stmt.bindLong(4, entity.getPlanflag() ? 1L: 0L);
 
        String basePrice = entity.getBasePrice();
        if (basePrice != null) {
            stmt.bindString(5, basePrice);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(6, price);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(7, image);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(8, desc);
        }
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(9, number);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(10, status);
        }
 
        String creteTime = entity.getCreteTime();
        if (creteTime != null) {
            stmt.bindString(11, creteTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Purchase entity) {
        stmt.clearBindings();
 
        Long purchaseId = entity.getPurchaseId();
        if (purchaseId != null) {
            stmt.bindLong(1, purchaseId);
        }
        stmt.bindLong(2, entity.getProductId());
 
        String porductName = entity.getPorductName();
        if (porductName != null) {
            stmt.bindString(3, porductName);
        }
        stmt.bindLong(4, entity.getPlanflag() ? 1L: 0L);
 
        String basePrice = entity.getBasePrice();
        if (basePrice != null) {
            stmt.bindString(5, basePrice);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(6, price);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(7, image);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(8, desc);
        }
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(9, number);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(10, status);
        }
 
        String creteTime = entity.getCreteTime();
        if (creteTime != null) {
            stmt.bindString(11, creteTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Purchase readEntity(Cursor cursor, int offset) {
        Purchase entity = new Purchase( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // purchaseId
            cursor.getLong(offset + 1), // productId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // porductName
            cursor.getShort(offset + 3) != 0, // planflag
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // basePrice
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // price
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // image
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // desc
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // number
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // status
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // creteTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Purchase entity, int offset) {
        entity.setPurchaseId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProductId(cursor.getLong(offset + 1));
        entity.setPorductName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPlanflag(cursor.getShort(offset + 3) != 0);
        entity.setBasePrice(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPrice(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setImage(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDesc(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setNumber(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setStatus(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCreteTime(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Purchase entity, long rowId) {
        entity.setPurchaseId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Purchase entity) {
        if(entity != null) {
            return entity.getPurchaseId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
